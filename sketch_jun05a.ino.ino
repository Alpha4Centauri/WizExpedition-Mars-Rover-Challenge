#include <Servo.h> // Include Servo Motor Library

Servo myServo; // Create myServo object for starting servo motor

int servoPin = 11; // Initialize GPIO Pin 11 (provides PWM) for Servo Motor

// Initialize GPIO Pins for Motors (defined GPIO Pins provide PWM)

const int motorPin1 = 5; 
const int motorPin2 = 6;
const int motorPin3 = 10;
const int motorPin4 = 9;

// Initialize LED GPIO Pins
const int LED1 = 3;
const int LED2 = 4;


void setup() {

  // Set motors as Output (reason: movement will be generated by motors to turn wheel in rover)
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT); 
  pinMode(motorPin3, OUTPUT); 
  pinMode(motorPin4, OUTPUT);

  // Set LEDs as Output (reason: They will blink when the rover detects a rock)
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);

  // Attach Servo Motor at GPIO 11 and get it started
  myServo.attach(servoPin);

  // Begin Serial Communications (necessary to connect P5js Serial Monitor Communication to Arduino Board for running Machine Learning Model)
  Serial.begin(9600);
}

void loop() {

  // Obtain Serial Data from p5j5
  while (Serial.available() > 0) {

    // see which case is getting output (case 1 = rock detected, case 2 = floor [no rock] detected, case 3 = human detected [false positive which is ignored])
    result = Serial.read();

    // move forward in mean time
    forward();
    delay(5000);

    // determine case using trained Teachable Machine model in p5js editor
    switch (result) {

      // case 1: Rock detected, rover stops, LEDs turn on, servo motor turns to prop up cardboard flap to allow rock to be put in manually
      case '1':
        Serial.println("Rock Detected");
        LEDsOn();
        delay(2000);
        Stop();
        myServo.write(180);
        delay(2000);

      // case 2: no rock detected, rover continues moving forwards
      case '2':
        Serial.println("No Rock Detected, Continue");
        delay(1000);

      // case 3: human detected, false positive which is ignored to help differentiate between random objects coming into camera's view [or else it will mark it as a rock]
      case '3':
        Serial.println("Human Detected, False Positive, Continue");
        delay(1000);
    }
  }
}

// define forward method
void forward() {
  digitalWrite(motorPin1, HIGH);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, HIGH);
}

// define backward method
void backward() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, HIGH);
  digitalWrite(motorPin3, HIGH);
  digitalWrite(motorPin4, LOW);  
}

// define turning left method
void left() {
  digitalWrite(motorPin1, HIGH);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, HIGH);
  digitalWrite(motorPin4, LOW);   
}

// define turning right method
void right() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, HIGH);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, HIGH);  
}

// define stop method
void Stop() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
}

// define method for turning on LEDs when rock is detected
void LEDsOn() {
  digitalWrite(LED1, HIGH);
  digitalWrite(LED2, HIGH);  
}
